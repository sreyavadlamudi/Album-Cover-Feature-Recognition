# -*- coding: utf-8 -*-
"""Album Cover Code

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OwALy9jZIiJT393WpjhptKePHJlaYj5T
"""

import warnings
warnings.filterwarnings('ignore')

import numpy as np
import pandas as pd
import keras
from PIL import Image

from keras.datasets import mnist, fashion_mnist
from IPython.display import Image
import tensorflow.keras as kb
from tensorflow.keras import backend
import tensorflow as tf
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import matplotlib as mpl
import matplotlib.pyplot as plt

!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

# Default Albums
!kaggle datasets download -d greg115/album-covers-images
# Prog Rock Albums
!kaggle datasets download -d safakkbilici/progressive-rock-album-covers

# Default Albums
!unzip album-covers-images.zip

# Prog Rock Albums
!unzip progressive-rock-album-covers.zip

# # Default Albums

# Load an image using Keras' image processing utilities
image_path = "./album_covers_512/9794.jpg"
img = keras.preprocessing.image.load_img(image_path)

# Convert the image to a NumPy array
img_array = keras.preprocessing.image.img_to_array(img)

# Get the dimensions of the image
height, width, channels = img_array.shape

print("Height:", height)
print("Width:", width)
print("Channels:", channels)

# # Prog Rock

# # Load an image using Keras' image processing utilities
image_path = "./albums_recover/996.jpg"
img = keras.preprocessing.image.load_img(image_path)

# Convert the image to a NumPy array
img_array = keras.preprocessing.image.img_to_array(img)

# Get the dimensions of the image
height, width, channels = img_array.shape

print("Height:", height)
print("Width:", width)
print("Channels:", channels)

from PIL import Image
image = Image.open('/content/album_covers_512/0.jpg')

# # https://cloudinary.com/guides/bulk-image-resize/python-image-resize-with-pillow-and-opencv
new_image = image.resize((260, 260))

# Convert the image to a NumPy array
img_array = keras.preprocessing.image.img_to_array(new_image)
new_image.save('test.jpg')

# Get the dimensions of the image
height, width, channels = img_array.shape

print("Height:", height)
print("Width:", width)
print("Channels:", channels)

# https://www.askpython.com/python/examples/display-images-using-python
import os

count = 0

directory = './album_covers_512'
output = './resized_default_covers'
os.makedirs(output, exist_ok=True)

for filename in os.listdir(directory):
  file_path = os.path.join(directory, filename)
  image = Image.open(file_path)
  new_image = image.resize((260, 260))
  # img_array = keras.preprocessing.image.img_to_array(new_image)
  new_image.save(f'{output}/test{count}.jpg')
  count+= 1

# Train Test Split
from sklearn.model_selection import train_test_split
import shutil

# Train Set of Prog & Non-Prog
os.makedirs('./train', exist_ok = True)
os.makedirs('./train/is_prog', exist_ok = True)
os.makedirs('./train/not_prog', exist_ok = True)

# Test Set of Prog & Non-Prog
os.makedirs('./test', exist_ok = True)
os.makedirs('./test/is_prog', exist_ok = True)
os.makedirs('./test/not_prog', exist_ok = True)

# Train Test Directories
train = './train'
train_prog = './train/is_prog'
train_def = './train/not_prog'

test = './test'
test_prog = './test/is_prog'
test_def = './test/not_prog'

# Dataset Directories
prog = './albums_recover'
default = './resized_default_covers'

test_size = 0.2

# Get the list of files in each dataset
dataset1_files = [f for f in os.listdir(prog) if f.endswith('.jpg')]
dataset2_files = [f for f in os.listdir(default) if f.endswith('.jpg')]

# Perform the train-test split for each dataset
dataset1_train, dataset1_test = train_test_split(dataset1_files, test_size=test_size, random_state=42)
dataset2_train, dataset2_test = train_test_split(dataset2_files, test_size=test_size, random_state=42)

# Copy the files to the train and test split directories
for file in dataset1_train:
    shutil.copy(os.path.join(prog, file), os.path.join(train_prog, file))
for file in dataset1_test:
    shutil.copy(os.path.join(prog, file), os.path.join(test_prog, file))

for file in dataset2_train:
    shutil.copy(os.path.join(default, file), os.path.join(train_def, file))
for file in dataset2_test:
    shutil.copy(os.path.join(default, file), os.path.join(test_def, file))

train_dir = "./train"
test_dir = "./test"

batch_size = 32
image_width = 260
image_height = 260

train_ds = tf.keras.utils.image_dataset_from_directory(
  train_dir, # file path
  seed=123, # seed
  image_size= (image_width, image_height), # size of image
  batch_size=batch_size) # number of images per batch

test_ds = tf.keras.utils.image_dataset_from_directory(
  test_dir, # file path
  seed=123, # seed
  image_size= (image_width, image_height), # size of image
  batch_size=batch_size) # number of images per batch

model = kb.Sequential()

# The Model <3
model.add(kb.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(image_width, image_height, 3)))
model.add(kb.layers.MaxPooling2D((2, 2), padding = 'same'))
model.add(kb.layers.Dropout(0.4)),

model.add(kb.layers.Conv2D(32, (3, 3), activation='relu'))
model.add(kb.layers.MaxPooling2D((2, 2), padding = 'same'))
model.add(kb.layers.BatchNormalization()),

model.add(kb.layers.Conv2D(64, (3, 3), activation='relu'))
model.add(kb.layers.MaxPooling2D((2, 2), padding = 'same'))
model.add(kb.layers.Dropout(0.3))

model.add(kb.layers.Conv2D(64, (3, 3), activation='relu'))
model.add(kb.layers.MaxPooling2D((2, 2), padding = 'same'))
model.add(kb.layers.BatchNormalization()),

model.add(kb.layers.Conv2D(128, (3, 3), activation='relu'))
model.add(kb.layers.MaxPooling2D((2, 2), padding = 'same'))
model.add(kb.layers.Dropout(0.1))

model.add(kb.layers.Conv2D(128, (3, 3), activation='relu'))
model.add(kb.layers.MaxPooling2D((2, 2), padding = 'same'))
model.add(kb.layers.BatchNormalization()),

model.add(kb.layers.Conv2D(128, (3, 3), activation='relu'))
model.add(kb.layers.MaxPooling2D((2, 2), padding = 'same'))

model.add(kb.layers.Flatten()) # flattens into single array

model.add(kb.layers.Dense(100, activation='relu')) #why 100
model.add(kb.layers.Dense(1, activation='sigmoid'))  #fix this layer

model.compile(loss='binary_crossentropy', optimizer = 'adam', metrics = ['accuracy'])

model.summary()

#metrics
history = model.fit(
    train_ds,
    epochs=50,
    validation_data= test_ds,
)

# Saving & Compiling Model

from tensorflow.keras import Model
from keras.preprocessing.text import Tokenizer
from pickle import dump

model.save('final_model.h5')
dump(tokenizer, open('tokenizer.pkl', 'wb'))

import pickle
from tensorflow.keras import Model
from keras.preprocessing.text import Tokenizer
from pickle import dump

with open('training_history1.pkl', 'wb') as file_pi:
    pickle.dump(history.history, file_pi)

from tensorflow.keras import Model
from keras.preprocessing.text import Tokenizer
from pickle import dump

# Provide the path to your .h5 file
model_path = './final_model1.h5'

# Load the model
model = tf.keras.models.load_model(model_path)

model.summary()

import pickle

history_path = './training_history1.pkl'

with open(history_path, 'rb') as file:
  history = pickle.load(file)

history

"""## Visuals

### Heatmap with GRADCAM
"""

import os

os.environ["KERAS_BACKEND"] = "tensorflow"

import numpy as np
import tensorflow as tf
import keras

# Display
from IPython.display import Image, display
import matplotlib as mpl
import matplotlib.pyplot as plt

import numpy as np
import tensorflow as tf
from tensorflow import keras
from IPython.display import Image, display
import matplotlib.pyplot as plt

# Assuming you've already loaded your model
loaded_model = tf.keras.models.load_model('/content/final_model1.h5')
loaded_model.trainable = True
loaded_model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Adjust these parameters based on your model and requirements
model_builder = keras.applications.xception.Xception
img_size = (260, 260)
last_conv_layer_name = "conv2d_4"

# The local path to your target image
#img_path = '/content/albums_recover/988.jpg'
img_path = "albums_recover/230.jpg"

# Display the image
display(Image(img_path))

def get_resized_img_array(img_path, size):
    # `img` is a PIL image of size 299x299
    img = keras.utils.load_img(img_path, target_size=size)
    # `array` is a float32 Numpy array of shape (299, 299, 3)
    array = keras.utils.img_to_array(img)
    # We add a dimension to transform our array into a "batch"
    # of size (1, 299, 299, 3)
    array = np.expand_dims(array, axis=0)
    return array


def make_gradcam_heatmap(img_array, model, last_conv_layer_name, pred_index=None):
    # First, we create a model that maps the input image to the activations
    # of the last conv layer as well as the output predictions
    grad_model = keras.models.Model(
        model.inputs, [model.get_layer(last_conv_layer_name).output, model.output]
    )

    # Then, we compute the gradient of the top predicted class for our input image
    # with respect to the activations of the last conv layer
    with tf.GradientTape() as tape:
        last_conv_layer_output, preds = grad_model(img_array)
        if pred_index is None:
            pred_index = tf.argmax(preds[0])
        class_channel = preds[:, pred_index]

    # Print statements for debugging
    print("last_conv_layer_output shape:", last_conv_layer_output.shape)
    print("class_channel:", class_channel.numpy())

    # Check if last_conv_layer_output or class_channel is None
    if last_conv_layer_output is None or class_channel is None:
        raise ValueError("last_conv_layer_output or class_channel is None")

    # This is the gradient of the output neuron (top predicted or chosen)
    # with regard to the output feature map of the last conv layer
    grads = tape.gradient(class_channel, last_conv_layer_output)

    # Check if grads is None
    if grads is None:
        raise ValueError("grads is None")

    # This is a vector where each entry is the mean intensity of the gradient
    # over a specific feature map channel
    pooled_grads = tf.reduce_mean(grads, axis=(0, 1, 2))

    # We multiply each channel in the feature map array
    # by "how important this channel is" with regard to the top predicted class
    # then sum all the channels to obtain the heatmap class activation
    last_conv_layer_output = last_conv_layer_output[0]
    heatmap = last_conv_layer_output @ pooled_grads[..., tf.newaxis]
    heatmap = tf.squeeze(heatmap)

    # For visualization purpose, we will also normalize the heatmap between 0 & 1
    heatmap = tf.maximum(heatmap, 0) / tf.math.reduce_max(heatmap)

    return heatmap.numpy()

from tensorflow.keras.applications.xception import preprocess_input, decode_predictions

img_array = get_resized_img_array(img_path, size=img_size)

loaded_model = tf.keras.models.load_model('final_model1.h5')
loaded_model.trainable = True
loaded_model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

# Remove last layer's softmax
loaded_model.layers[-1].activation = None

# Print what the top predicted class is
preds = loaded_model.predict(img_array)
print("Raw Model Predictions:", preds)

# Generate class activation heatmap
heatmap = make_gradcam_heatmap(img_array, loaded_model, last_conv_layer_name)

# Display the heatmap
plt.imshow(heatmap, cmap='viridis')
plt.show()

#Super visualization
def save_and_display_gradcam(img_path, heatmap, cam_path="cam.jpg", alpha=0.4):
    # Load the original image
    img = keras.utils.load_img(img_path)
    img = keras.utils.img_to_array(img)

    # Rescale heatmap to a range 0-255
    heatmap = np.uint8(255 * heatmap)

    # Use jet colormap to colorize heatmap
    jet = mpl.colormaps["jet"]

    # Use RGB values of the colormap
    jet_colors = jet(np.arange(256))[:, :3]
    jet_heatmap = jet_colors[heatmap]

    # Create an image with RGB colorized heatmap
    jet_heatmap = keras.utils.array_to_img(jet_heatmap)
    jet_heatmap = jet_heatmap.resize((img.shape[1], img.shape[0]))
    jet_heatmap = keras.utils.img_to_array(jet_heatmap)

    # Superimpose the heatmap on original image
    superimposed_img = jet_heatmap * alpha + img
    superimposed_img = keras.utils.array_to_img(superimposed_img)

    # Save the superimposed image
    superimposed_img.save(cam_path)

    # Display Grad CAM
    display(Image(cam_path))


save_and_display_gradcam(img_path, heatmap)

"""GRADCAM HEAT MAP FOR NON PROG ROCK ALBUM PIC"""

import numpy as np
import tensorflow as tf
from tensorflow import keras
from IPython.display import Image, display
import matplotlib.pyplot as plt

# Assuming you've already loaded your model
loaded_model = tf.keras.models.load_model('/content/final_model1.h5')
loaded_model.trainable = True
loaded_model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Adjust these parameters based on your model and requirements
model_builder = keras.applications.xception.Xception
img_size = (260, 260)
last_conv_layer_name = "conv2d_4"

# The local path to your target image
#img_path = '/content/albums_recover/988.jpg'
img_path = "album_covers_512/304.jpg"

# Display the image
display(Image(img_path))

def get_resized_img_array(img_path, size):
    # `img` is a PIL image of size 299x299
    img = keras.utils.load_img(img_path, target_size=size)
    # `array` is a float32 Numpy array of shape (299, 299, 3)
    array = keras.utils.img_to_array(img)
    # We add a dimension to transform our array into a "batch"
    # of size (1, 299, 299, 3)
    array = np.expand_dims(array, axis=0)
    return array


def make_gradcam_heatmap(img_array, model, last_conv_layer_name, pred_index=None):
    # First, we create a model that maps the input image to the activations
    # of the last conv layer as well as the output predictions
    grad_model = keras.models.Model(
        model.inputs, [model.get_layer(last_conv_layer_name).output, model.output]
    )

    # Then, we compute the gradient of the top predicted class for our input image
    # with respect to the activations of the last conv layer
    with tf.GradientTape() as tape:
        last_conv_layer_output, preds = grad_model(img_array)
        if pred_index is None:
            pred_index = tf.argmax(preds[0])
        class_channel = preds[:, pred_index]

    # Print statements for debugging
    print("last_conv_layer_output shape:", last_conv_layer_output.shape)
    print("class_channel:", class_channel.numpy())

    # Check if last_conv_layer_output or class_channel is None
    if last_conv_layer_output is None or class_channel is None:
        raise ValueError("last_conv_layer_output or class_channel is None")

    # This is the gradient of the output neuron (top predicted or chosen)
    # with regard to the output feature map of the last conv layer
    grads = tape.gradient(class_channel, last_conv_layer_output)

    # Check if grads is None
    if grads is None:
        raise ValueError("grads is None")

    # This is a vector where each entry is the mean intensity of the gradient
    # over a specific feature map channel
    pooled_grads = tf.reduce_mean(grads, axis=(0, 1, 2))

    # We multiply each channel in the feature map array
    # by "how important this channel is" with regard to the top predicted class
    # then sum all the channels to obtain the heatmap class activation
    last_conv_layer_output = last_conv_layer_output[0]
    heatmap = last_conv_layer_output @ pooled_grads[..., tf.newaxis]
    heatmap = tf.squeeze(heatmap)

    # For visualization purpose, we will also normalize the heatmap between 0 & 1
    heatmap = tf.maximum(heatmap, 0) / tf.math.reduce_max(heatmap)

    return heatmap.numpy()

from tensorflow.keras.applications.xception import preprocess_input, decode_predictions

img_array = get_resized_img_array(img_path, size=img_size)

loaded_model = tf.keras.models.load_model('final_model1.h5')
loaded_model.trainable = True
loaded_model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

# Remove last layer's softmax
loaded_model.layers[-1].activation = None

# Print what the top predicted class is
preds = loaded_model.predict(img_array)
print("Raw Model Predictions:", preds)

# Generate class activation heatmap
heatmap = make_gradcam_heatmap(img_array, loaded_model, last_conv_layer_name)

# Display the heatmap
plt.imshow(heatmap, cmap='viridis')
plt.show()

#Super visualization
def save_and_display_gradcam(img_path, heatmap, cam_path="cam.jpg", alpha=0.4):
    # Load the original image
    img = keras.utils.load_img(img_path)
    img = keras.utils.img_to_array(img)

    # Rescale heatmap to a range 0-255
    heatmap = np.uint8(255 * heatmap)

    # Use jet colormap to colorize heatmap
    jet = mpl.colormaps["jet"]

    # Use RGB values of the colormap
    jet_colors = jet(np.arange(256))[:, :3]
    jet_heatmap = jet_colors[heatmap]

    # Create an image with RGB colorized heatmap
    jet_heatmap = keras.utils.array_to_img(jet_heatmap)
    jet_heatmap = jet_heatmap.resize((img.shape[1], img.shape[0]))
    jet_heatmap = keras.utils.img_to_array(jet_heatmap)

    # Superimpose the heatmap on original image
    superimposed_img = jet_heatmap * alpha + img
    superimposed_img = keras.utils.array_to_img(superimposed_img)

    # Save the superimposed image
    superimposed_img.save(cam_path)

    # Display Grad CAM
    display(Image(cam_path))


save_and_display_gradcam(img_path, heatmap)

"""## Loss Function & Accuracy"""

# Metric Visualizations - From the RNN Notebook

# Loss Function
import matplotlib.pyplot as plt

loss = history["loss"]
val_loss = history["val_loss"]
epochs = range(len(loss))

plt.figure()
plt.plot(epochs, loss, "b", label="Training loss")
plt.plot(epochs, val_loss, "r", label="Validation loss")
plt.title("Loss Function History")
plt.xlabel("Epochs")
plt.ylabel("Loss")
plt.legend()
plt.show()

# Metric Visualizations - From the RNN Notebook

# Accuracy
import matplotlib.pyplot as plt

loss = history["accuracy"]
val_loss = history["val_accuracy"]
epochs = range(len(loss))

plt.figure()
plt.plot(epochs, loss, "b", label = "Training Accuracy")
plt.plot(epochs, val_loss, "r", label = "Validation Accuracy")
plt.title("Accuracy History")
plt.xlabel("Epochs")
plt.ylabel("Accuracy")
plt.legend()
plt.show()